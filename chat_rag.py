from langchain_openai import ChatOpenAI
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.globals import set_llm_cache
from langchain_community.cache import SQLiteCache
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory

from index_documents import get_retriever
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
# from index_documents_parent import get_retriever_with_persistent_docstore

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è LLM
set_llm_cache(SQLiteCache(database_path=".langchain_cache.db"))

# 1) LLM
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.0)

# 2) –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ (–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏)
contextualize_q_system_prompt = (
    "–î–∞–Ω —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç "
    "—Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π "
    "–≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. –ù–ï –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, "
    "–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω–∏ –∫–∞–∫ –µ—Å—Ç—å."
)

contextualize_q_prompt = ChatPromptTemplate.from_messages([
    ("system", contextualize_q_system_prompt),
    MessagesPlaceholder("chat_history"),
    ("human", "{input}"),
])

# 3) –ü–æ–ª—É—á–µ–Ω–∏–µ retriever'–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ history-aware retriever
# –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ ParentDocument —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞: get_retriever(use_parent_document=True)
USE_PARENT_DOCUMENT = True  # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞: True –¥–ª—è ParentDocument, False –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞

retriever = get_retriever(use_parent_document=USE_PARENT_DOCUMENT)
print(f"üîß –†–µ–∂–∏–º retriever'–∞: {'ParentDocument' if USE_PARENT_DOCUMENT else '–ü—Ä–æ—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π'}")

history_aware_retriever = create_history_aware_retriever(
    llm, retriever, contextualize_q_prompt
)

# 4) –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
qa_system_prompt = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–ü–°–£-IP. "
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "
    "–Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å. "
    "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
    "–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ![–æ–ø–∏—Å–∞–Ω–∏–µ](–∏–º—è_—Ñ–∞–π–ª–∞.png), "
    "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π –∏—Ö –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç "
    "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.\n\n"
    "{context}"
)

qa_prompt = ChatPromptTemplate.from_messages([
    ("system", qa_system_prompt),
    MessagesPlaceholder("chat_history"),
    ("human", "{input}"),
])

# 5) Question-answer chain
question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)

# 6) RAG chain
rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)

# 7) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
store = {}

def get_session_history(session_id: str) -> BaseChatMessageHistory:
    if session_id not in store:
        store[session_id] = ChatMessageHistory()
    return store[session_id]

# 8) Conversational RAG chain —Å –∏—Å—Ç–æ—Ä–∏–µ–π
conversational_rag_chain = RunnableWithMessageHistory(
    rag_chain,
    get_session_history,
    input_messages_key="input",
    history_messages_key="chat_history",
    output_messages_key="answer",
)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# –§—É–Ω–∫—Ü–∏—è chat(user_input) –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π CLI
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def chat(user_input: str, session_id: str = "default_session", debug_context: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ RAG —Å–∏—Å—Ç–µ–º—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏"""
    
    result = conversational_rag_chain.invoke(
        {"input": user_input},
        config={"configurable": {"session_id": session_id}},
    )
    
    answer = result["answer"]
    sources = result.get("context", [])  # context —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    
    # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if debug_context:
        print("\nüîç DEBUG: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
        for i, source in enumerate(sources[:3], 1):
            import re
            images = re.findall(r'\!\[.*?\]\(.*?\)', source.page_content)
            print(f"  –ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ")
            if images:
                for j, img in enumerate(images, 1):
                    print(f"    {j}. {img}")
        print()
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nü™Ñ –û—Ç–≤–µ—Ç:\n", answer)
    if sources:
        print("\nüìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
        for i, source in enumerate(sources[:3], 1):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            title = source.metadata.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            source_path = source.metadata.get("source", "")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∫–∞–∫ —Å—Å—ã–ª–∫—É
            if source_path:
                print(f"  {i}. {title}")
                print(f"     üìé –ò—Å—Ç–æ—á–Ω–∏–∫: {source_path}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if "page" in source.metadata:
                    print(f"     üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {source.metadata['page']}")
            else:
                print(f"  {i}. {title}")
    
    return result

# ‚Äî –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ ‚Äî
if __name__ == "__main__":
    print("üöÄ RAG-—á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—É—â–µ–Ω!")
    print("üí° –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –§–ü–°–£-IP (exit ‚Äî –≤—ã–π—Ç–∏)")
    
    session_id = "user_session_001"  # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    debug_mode = False
    
    while True:
        try:
            q = input("\nüë§ –í—ã: ")
            if q.lower() in {"exit", "quit", "–≤—ã—Ö–æ–¥"}:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif q.lower() in {"debug", "–¥–µ–±–∞–≥"}:
                debug_mode = not debug_mode
                print(f"üîß Debug —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if debug_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
                continue
            
            if q.strip():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
                chat(q, session_id, debug_context=debug_mode)
            else:
                print("‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
                print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–≤–µ–¥–∏—Ç–µ 'debug' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞...")
